- name: Prepare System
  hosts: all
  become: true
  tasks:
    - name: Update and upgrade packages
      apt:
        cache_valid_time: 86400 #One day
        update_cache: yes
        upgrade: 'yes'
    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
      vars:
        packages:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
    - name: Add an apt signing key for docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present
    - name: Install docker and dependencies
      apt:
        name: "{{ packages }}"
        state: present
      vars:
        packages:
          - docker-ce
          - docker-ce-cli
          - containerd.io
      notify:
        - docker status
    - name: Add user to docker group
      user:
        name: administrator
        group: docker
    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none
    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0
    - name: Add apt signing key for k8s
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
    - name: Adding apt repository for k8s
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list
    - name: Install kubernetes binaries
      apt:
        name: "{{ packages }}"
        state: present
      vars:
        packages:
          - kubelet
          - kubeadm
          - kubectl
    - name: Configure node ip
      lineinfile:
        path: /etc/default/kubelet
        line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
        create: yes
    - name: restart kubelet
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted
  handlers:
    - name: docker status
      service: name=docker state=started
- name: control-plane set up
  become: true
  hosts: control
  tasks:
    - name: Copy kubeadm-config.yaml file
      ansible.builtin.copy:
        src: k8s/kubeadm-config.yaml
        dest: /home/administrator/
        owner: administrator
        group: administrator
    - name: Copy custom-resources.yaml file
      ansible.builtin.copy:
        src: k8s/custom-resources.yaml
        dest: /home/administrator/
        owner: administrator
        group: administrator
    - name: Copy tigera-operator.yaml file
      ansible.builtin.copy:
        src: k8s/tigera-operator.yaml
        dest: /home/administrator/
        owner: administrator
        group: administrator
    - name: Initialize the Kubernetes cluster using kubeadm
      command: kubeadm init --config /home/administrator/kubeadm-config.yaml
    - name: Create .kube folder
      become: false
      file:
        path: ".kube/"
        state: directory
    - name: Copy conf file
      copy:
        src: "/etc/kubernetes/admin.conf"
        dest: "/home/administrator/.kube/config"
        owner: administrator
        group: administrator
        mode: 0755
        remote_src: true
    - name: Install calico pod network
      become: false
      command: "{{ item }}"
      with_items:
        - kubectl create -f /home/administrator/tigera-operator.yaml
        - kubectl create -f /home/administrator/custom-resources.yaml
    - name: Generate join command
      become: true
      command: kubeadm token create --print-join-command
      register: join_command
    - name: Copy join command to file
      # become: true
      ansible.builtin.copy:
        content: "{{ join_command.stdout_lines[0] }}"
        dest: /tmp/join-command
        owner: administrator
        group: administrator
        mode: 0700
    - name: Copy join command file to local
      ansible.builtin.fetch:
        src: /tmp/join-command
        dest: ./k8s/join-command
        flat: yes
- name: Join worker nodes
  hosts: worker
  become: true
  tasks:
    - name: Copy the join command to the worker
      ansible.builtin.copy:
        src: "k8s/join-command"
        dest: /tmp/join-command.sh
        owner: administrator
        group: administrator
        mode: 0777
    - name: Join to the controle node
      command: sh /tmp/join-command.sh